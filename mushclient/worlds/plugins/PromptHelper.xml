<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, November 05, 2016, 1:38 PM -->
<!-- MuClient version 4.93 -->

<!-- Plugin "PromptHelper" generated by Plugin Wizard -->

<muclient>
<plugin
   name="PromptHelper"
   author="Victorious"
   id="1b01e62a427604660ad2527c"
   language="Lua"
   purpose="Automatically plays sound prompts"
   save_state="y"
   date_written="2016-11-05 13:36:08"
   requires="4.75"
   version="1.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<triggers>
</triggers>

<aliases>
  <alias
   match="^prompthelper ([-0-9]+) ([-0-9]+) ([-0-9]+) ([-0-9]+) ([-0-9]+) ([-0-9]+)$"
   enabled="y"
   regexp="y"
   send_to="12"
   ignore_case="y"
   sequence="2"
  >
  <send>onPromptAlias(tonumber("%1"), tonumber("%2"), tonumber("%3"), tonumber("%4"), tonumber("%5"), tonumber("%6"))
</send>
  </alias>
</aliases>

<script>
<![CDATA[
PPI = require("ppi")
ppi = nil
soundDir = GetInfo(60).."/PromptHelper/"
volume = 10
-- previous values of hp/mn/mv, in percent
prevHP = nil
prevMN = nil
prevMV = nil

function OnPluginInstall()
	ppi = PPI.Load("aedf0cb0be5bf045860d54b7")
	assert(ppi)
end

-- this function should be called when new prompt information is received
function onPromptAlias(curHP, maxHP, curMN, maxMN, curMV, maxMV)
	local hpPercent = curHP * 100.0 / maxHP 
	local mnPercent = curMN * 100.0 / maxMN 
	local mvPercent = curMV * 100.0 / maxMV 
	onPrompt(hpPercent, mnPercent, mvPercent)
end

function onPrompt(hpPercent, mnPercent, mvPercent)
	if prevHP == nil then
		local snd = getSoundForHP(hpPercent)
		playSound(snd)
	else -- compare the prompt that should be played for previous and current hp, and only play the prompt for current hp if condition changes
		local prevSnd = getSoundForHP(prevHP)
		local curSnd = getSoundForHP(hpPercent)
		if prevSnd ~= curSnd then
			playSound(curSnd)
		end
	end
	prevHP = hpPercent
	
	-- play stereo mana prompts only if mana has changed by at least 5% since the  last prompt was played
	if prevMN == nil or math.abs(mnPercent - prevMN) >= 5 then
		if mnPercent >= 100 then
			playSound("mana full")
		elseif mnPercent >= 20 then
			local pan = computePan(mnPercent)
			playSound("mana", pan)
		elseif mnPercent >= 0 then
			local pan = computePan(mnPercent)
			playSound("mana alarm", pan)
		end
		prevMN = mnPercent
	end
	
	-- play stereo movement prompts only if move has changed by at least 5% since the  last prompt was played
	if prevMV == nil or math.abs(mvPercent - prevMV) >= 5 then
		if mvPercent >= 100 then
			playSound("mv full")
		elseif mvPercent >= 0 then
			local pan = computePan(mvPercent)
			playSound("mv", pan)
		end
		prevMV = mvPercent
	end
end

-- get the name of the sound file that should be played corresponding to a HP percent
function getSoundForHP(hpPercent)
	assert(hpPercent)
	if hpPercent >= 100 then
		return "excellent"
	elseif hpPercent >= 90 then
		return "scratches"
	elseif hpPercent >= 66 then
		return "small wounds"
	elseif hpPercent >= 50 then
		return "quite a few"
	elseif hpPercent >= 30 then
		return "big nasty"
	elseif hpPercent >= 10 then
		return "pretty hurt"
	elseif hpPercent >= 0 then
		return "awful"
	elseif hpPercent < 0 then
		return "mort"
	end
end

--calculates panning value to feed to ppi.play i.e 50% should return pan = 0 (centre of audio field)
function computePan(percent)
	if percent > 100 then
		return 100
	elseif percent >= 0  then
		return 100-2*(100-percent)
	else
		return -100
	end
end

function playSound(soundFile, pan)
	if pan == nil then
		pan = 0
	end
	ppi.play(soundDir..soundFile..".ogg", 0, pan, volume)
end
]]>
</script>
</muclient>